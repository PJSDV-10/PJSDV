VERY FUCKING EARLY ALPHABETA V0.00000000000001 VERSIE. VRAAG ZELF VOOR MEER FUNCTIONALITEIT WAAR NODIG!!



De wemos kan dingen sturen naar de server, zoals dat een knop is ingedrukt.
De website kan dingen sturen naar de server, zoals opvragen van de status van alle wemosjes.
De server kan dingen sturen naar de wemos, zoals opvragen van data.
stuff

Basis request:
<message>
    <header>
        <sender>senderName</sender>
        <receiver>receiverName</receiver>
    </header>
    <function>functionName</function>
    <context>
        <context1>CanHaveAnyName</context1>
        etc
        etc
        etc
    </context>
</function


wemos aanmelden bij server:

<message>
    <header>
        <sender>wemosNaam</sender>
        <receiver>server</receiver>
    </header>
    <function>authentication</function>
    <context>
        <password>JeMoederIsEenWachtwoord</password>
        <clientName>Keuken Lamp</clientName>
        <capabilities>
            <func>
                <type>actuateBool</type>
                <funcName>lamp</funcName>
            </func>
            <func>
                <type>buttonPress</type>
                <funcName>lampKnop</funcName>
            </func>
        </capabilities>
    </context>
</message>

Dit is een lamp in de keuken. De naam van de wemos bij clientName is de naam die op de website wordt getoont. Maak dit een normale naam pls.
Deze wemos kan twee dingen doen, namelijk de func's met types "actuateBool" en "buttonPress". actuateBool betekend dat deze wemos iets kan aan of uitzetten. buttonPress betekend dat deze wemos zelf een knop heeft die ingedrukt kan worden. De server moet dit dus kunnen ontvangen.
Ze hebben beide een type en een funcName. Deze zijn nodig voor bijvoorbeeld meerdere soorten sensoren. 

Een actuateBool is ook speciaal in dat je deze kan besturen en kan uitlezen. Je kan de funcName van een actuateBool in een status request doen en je krijgt de status van de actuator.


Het kan ook dat de wemos een sensor is, bijvoorbeeld een temperatuursensor, die geen actuator is. Dan zou alleen de capabilities aangepast moeten worden.
Een voorbeeld is dan:

<capabilities>
    <func>
        <type>sensor</type>
        <funcName>lichtSensor</funcName>
    </func>
    <func>
        <type>sensor</type>
        <funcName>tempSensor</funcName>
    </func>
</capabilities>

Zo kunnen meerdere soorten sensoren worden weergeven.

De website moet zichzelf ook authenticeren bij de server. Dat ziet er zo uit, die is namelijk iets anders.

<message>
    <header>
        <sender>website</sender>
        <receiver>server</receiver>
    </header>
    <function>authentication</function>
    <context>
        <password>JeMoederIsEenWachtwoord</password>
        <clientName>Website</clientName>
        <capabilities>
            <func>
                <type>frontend</type>
                <funcName>na</funcName>
            </func>
        </capabilities>
    </context>
</message>

Er veranderd vrij weinig, maar de server heeft door dat het type van de func onder capabilities "frontend" is en zodoende herkent de server dat als website.


Een request van de website naar de server kan er zo uitzien:

<message>
    <header>
        <sender>website</sender>
        <receiver>server</receiver>
    </header>
    <function>getStatusAll</function>
    <context>
        <password>JeMoederIsEenWachtwoord</password>
    </context>
</message>

In deze vraagt de website om de status van alle wemos apparaten. In dat geval stuurt de server een bericht dat er ongeveer zo uitziet naar alle wemosjes. Het lijkt een beetje op een broadcast bericht, en de reden is dat je niet wilt dat de server te lang bezig is met meerdere xml documenten opzetten.

<message>
    <header>
        <sender>server</sender>
        <receiver>allWemos</receiver>
    </header>
    <function>getStatusBroadcast</function>
    <context>
        <password>JeMoederIsEenWachtwoord</password>
        <wemosjes>
            <wemos name="UniekeWemosNaamDieDeWemosOokGebruiktBijDeSenderInDeHeader">
                <sensor>lichtSensor</sensor>
                <sensor>tempSensor</sensor>
            </wemos>
            <wemos name="AndereUniekeWemosNaamDieDeWemosOokGebruiktBijDeSenderInDeHeader">
                <sensor>lamp</sensor>
            </wemos>
        </wemosjes>
    </context>
</message>

Zoals je kan zien zitten alle beschikbare wemosjes hier in dit bericht. Het handige is dat je meerdere sensoren kan opgeven om uit te lezen. Ook zoals eerder aangegeven is bij de tweede wemos de sensor "lamp". Dit is dezelfde lamp uit de keuken lamp van eerder, waar de wemos zich aanmeldde bij de server. Dit is origineel aan actuateBool, maar die kan dus ook als sensor worden gebruikt.
Een wemos moet dus zn eigen naam herkennen in dit bericht als attribuut. De hoop is dat dit sneller gaat dan elke keer in het element zelf kijken.

Elke wemos zal dan zoiets terugsturen als dit:

<message>
    <header>
        <sender>wemosNaam</sender>
        <receiver>server</receiver>
    </header>
    <function>answerToStatusRequest</function>
    <context>
        <sensor>
            <name>lamp</name>
            <status>1</status>
        </sensor>
    </context>
</message>

Dit is een antwoord op een eerdere request van de server. Zoals je kan zien is er maar 1 sensor, namelijk de lamp van eerder. De status is 1, voor aan obviously. Het zou 0 zijn geweest als de lamp uitstond.

De server krijgt meerdere van deze binnen. De server heeft onthouden hoeveel wemosjes hij heeft toegevoegd in die broadcast van hem, dus die wacht op alle wemosjes en pas daarna gaat ie een nieuw bericht maken die voor de website bedoelt is. Als na 2 seconden niet alle wemosjes hebben gereageerd wordt er gestuurd wat de server wel heeft. 

Het volgende wordt er dan vanaf de server gestuurd naar de server als alle wemosjes hebben reageert op de getStatusAll functie:

<message>
    <header>
        <sender>server</sender>
        <receiver>website</receiver>
    </header>
    <function>answerToStatusRequest</function>
    <context>
        <wemosjes>
            <wemos>
                <name>UniekeWemosNaamDieDeWemosOokGebruiktBijDeSenderInDeHeader</name>
                <sensors>    
                    <sensor>
                        <name>lichtSensor</name>
                        <status>726</status>
                    </sensor>
                    <sensor>
                        <name>tempSensor</name>
                        <status>21.5</status>
                    </sensor>
                </sensors>
            </wemos>
            <wemos>
                <name>AndereUniekeWemosNaamDieDeWemosOokGebruiktBijDeSenderInDeHeader</name>
                <sensors>    
                    <sensor>
                        <name>lamp</name>
                        <status>1</status>
                    </sensor>
                </sensors>
            </wemos>
        </wemosjes>
    </context>
</message>

Dit is een vrij lang bericht, maar zoals je kan zien zijn hier de twee wemosjes te zien die eerder waren opgevraagd. Een sensor kan elke soort waarde teruggeven, zoals een hoog getal in bijvoorbeeld nits voor lichtSensor of celcius voor tempSensor. Een actuateBool geeft altijd een 1 of 0 terug als antwoord. 